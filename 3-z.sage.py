

# This file was *autogenerated* from the file 3-z.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5)
from surfaces import *
from lifted_twist import *
from index import *

G = AlternatingGroup(_sage_const_4 )
x = G("(1,2)(3,4)"); y = G("(1,2,3)")
number_of_edges = _sage_const_6 
hom = [x,x,x,x,y,y**(-_sage_const_1 )]
gluing = {_sage_const_0 :_sage_const_1 ,_sage_const_1 :_sage_const_0 ,_sage_const_2 :_sage_const_3 ,_sage_const_3 :_sage_const_2 ,_sage_const_4 :_sage_const_5 ,_sage_const_5 :_sage_const_4 }
edge_orientations = {_sage_const_0 :_sage_const_1 ,_sage_const_1 :-_sage_const_1 ,_sage_const_2 :_sage_const_1 ,_sage_const_3 :-_sage_const_1 ,_sage_const_4 :_sage_const_1 ,_sage_const_5 :-_sage_const_1 }

base_surface = BaseSurface(number_of_edges, gluing, edge_orientations)
cover = Cover(base_surface, G, hom)

h = HomologyGroup(cover)
deck_group_actions = {g:h.action_of_deck_group_on_homology(g) for g in G}
assert h.module.dimension() == _sage_const_6 

##### Building the irrep #####

# Our isotypic component is 2 copies of the standard representation of A_4
# In this case, the isotypic component is the entire homology group

rep = SymmetricGroupRepresentation([_sage_const_3 ,_sage_const_1 ], "specht")

# Checking that we have the correct representation
for g in G:
    assert deck_group_actions[g].trace() == _sage_const_2 *rep(g).trace()

##### Building isomorphism between homology and rep #####

A = matrix([[_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ],[_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ]])
assert A.determinant() != _sage_const_0 
B = zero_matrix(_sage_const_6 )

for g in G:
    g_bad = deck_group_actions[g].matrix()
    g_good = block_diagonal_matrix(rep(g), rep(g))
    B = B + g_bad*A*(g_good.inverse())

# Checking that we indeed have an isomorphism
assert B.determinant() != _sage_const_0 
for g in G:
    g_bad = deck_group_actions[g].matrix()
    g_good = block_diagonal_matrix(rep(g), rep(g))
    assert g_bad*B*(g_good.inverse()) == B

##### Lifting twists #####

twist_matrices = []

for power in range (_sage_const_1 ,_sage_const_4 ):
    for curve in liftable_curves(cover, power):
        T = action_of_twist_on_homology(cover, h, curve, power)
        for g in G:
            assert T.matrix()*deck_group_actions[g].matrix() == deck_group_actions[g].matrix()*T.matrix()
        R = B.inverse()*T.matrix()*B
        T_in_isotypic = matrix([[R[_sage_const_0 ][_sage_const_0 ], R[_sage_const_0 ][_sage_const_3 ]],[R[_sage_const_3 ][_sage_const_0 ],R[_sage_const_3 ][_sage_const_3 ]]])
        for i in range(_sage_const_0 ,_sage_const_2 ):
            for j in range(_sage_const_0 ,_sage_const_2 ):
                assert T_in_isotypic[i][j] in ZZ
        assert T_in_isotypic.determinant() == _sage_const_1 

        twist_matrices.append(T_in_isotypic)
        #print(T_in_isotypic)

##### Check finite index #####

print(is_finite_index(twist_matrices))


